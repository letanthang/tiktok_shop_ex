defmodule TiktokShop.Product do
  @moduledoc """
  Product api
  """

  alias TiktokShop.Client

  @doc """
  Get product list

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#

  `search_status`: 0-all、1-draft、2-pending、3-failed、4-live、5-seller_deactivat、6-platform_deactivated、7-freeze​ (require)
  """
  @get_product_list_schema %{
    search_status: [type: :integer, in: 0..7],
    seller_sku_list: [type: {:array, :string}],
    page_size: [type: :integer, required: true, number: [min: 1, max: 100]],
    page_number: [type: :integer, required: true, number: [min: 1]],
    # timestamp
    update_time_from: [type: :integer, number: [min: 0]],
    update_time_to: [type: :integer, number: [min: 0]],
    create_time_from: [type: :integer, number: [min: 0]],
    create_time_to: [type: :integer, number: [min: 0]]
  }
  def get_product_list(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_product_list_schema),
         {:ok, client} <- Client.new(credential) do
      Client.post(client, "/api/products/search", nil, query: data)
    end
  end

  @doc """
  Get product detail

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#hsy3Mb
  """
  @get_product_detail_schema %{
    product_id: [type: :string, required: true]
  }
  def get_product_detail(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_product_detail_schema),
         {:ok, client} <- Client.new(credential) do
      Client.get(client, "/api/products/details", query: data)
    end
  end

  @doc """
  DeActive product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#ruq5mh

  `product_ids` array products need to deactive
  """
  @deactive_products_schema %{
    product_ids: [type: {:array, :string}, required: true]
  }
  def deactive_products(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @deactive_products_schema),
         {:ok, client} <- Client.new(credential) do
      Client.post(client, "/api/products/inactivated_products", data)
    end
  end

  @doc """
  Delete product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#MeZAY6

  `product_ids` array products need to deactive
  """
  @delete_products_schema %{
    product_ids: [type: {:array, :string}, required: true]
  }
  def delete_products(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @delete_products_schema),
         {:ok, client} <- Client.new(credential) do
      Client.delete(client, "/api/products", body: data)
    end
  end

  @doc """
  Get all product category

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#jIY8hJ

  """
  def get_categories(credential \\ []) do
    with {:ok, client} <- Client.new(credential) do
      Client.get(client, "/api/products/categories")
    end
  end

  @doc """
  Get attribute by category

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#WBz4V0
  """
  @get_attributes_schema %{
    category_id: [type: :string, required: true]
  }
  @spec get_attributes(nil | maybe_improper_list | map) :: {:error, any} | {:ok, any}
  def get_attributes(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_attributes_schema),
         {:ok, client} <- Client.new(credential) do
      Client.get(client, "/api/products/attributes", query: data)
    end
  end

  @doc """
  Get rule categories by category_id

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#Vo9x7O
  """
  @get_categories_rules_schema %{
    category_id: [type: :string, required: true]
  }
  @spec get_categories_rules(nil | maybe_improper_list | map) :: {:error, any} | {:ok, any}
  def get_categories_rules(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_categories_rules_schema),
         {:ok, client} <- Client.new(credential) do
      Client.get(client, "/api/products/categories/rules", query: data)
    end
  end

  @doc """
  Get all brands product

  References: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#IPng1X
  """
  def get_brands(credential \\ []) do
    with {:ok, client} <- Client.new(credential) do
      Client.get(client, "/api/products/brands")
    end
  end

  @doc """
  Upload image product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#dO1LU7

  `img_data`: just support image type: JPG, JPEG, PNG. Image picture pixels at least 600*600 and at most 20000*20000, Max size of original image: 5MB (recommand: image size have to >100KB, width/height must be >1000pix). The picture file is a string generated by base64 encoding.

  `img_scene`: Scenes using pictures:​
   - 1:"PRODUCT_IMAGE" The ratio of horizontal and vertical is recommended to be 1:1​
   - 2:"DESCRIPTION_IMAGE"​
   - 3:"ATTRIBUTE_IMAGE " The ratio of horizontal and vertical is recommended to be 1:1​
   - 4:"CERTIFICATION_IMAGE"​
   - 5:"SIZE_CHART_IMAGE"
  """
  @upload_image_scheme %{
    img_data: [type: :string, required: true],
    img_scene: [type: :integer, required: true]
  }
  def upload_images(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @upload_image_scheme),
         {:ok, client} <- Client.new(credential) do
      Client.post(client, "/api/products/upload_imgs", data)
    end
  end

  @doc """
  Update file

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#gKjcnl

  `file_data`: Import the file in pdf format. The file is a string generated by base64 encoding. The original file size must not exceed 10M.

  `file_name`: string have format <file_name>.pdf
  """
  @update_files_scheme %{
    file_data: [type: :string, required: true],
    file_name: [type: :string, required: true]
  }
  def upload_files(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @update_files_scheme),
         {:ok, client} <- Client.new(credential) do
      Client.post(client, "/api/products/upload_files", data)
    end
  end

  @create_product_scheme %{
    product_name: [type: :string, required: true],
    description: [type: :string, required: true],
    category_id: [type: :string, required: true],
    brand_id: [type: :string, required: true],
    images: [
      type:
        {:array,
         %{
           id: :string,
           required: true
         }},
      required: true
    ],
    warranty_period: [type: :integer],
    warranty_policy: [type: :string],
    package_length: [type: :integer],
    package_width: [type: :integer],
    package_height: [type: :integer],
    package_weight: [type: :string],
    size_chart: %{
      img_id: [type: :string, required: true]
    },
    product_certifications: [
      type:
        {:array,
         %{
           id: [type: :string, required: true],
           images: {:array, %{id: [type: :string, required: true]}},
           files:
             {:array,
              %{
                id: [type: :string, required: true],
                name: [type: :string, required: true],
                type: [type: :string, required: true]
              }}
         }}
    ],
    is_cod_open: [type: :boolean, required: true],
    skus: [
      type:
        {:array,
         %{
           sales_attributes: [
             type:
               {:array,
                %{
                  attribute_id: [type: :string, required: true],
                  value_id: :string,
                  custom_value: :string,
                  sku_img: %{
                    id: [type: :string, required: true]
                  }
                }},
             required: true
           ],
           stock_infos:
             {:array,
              %{
                warehouse_id: [type: :string, required: true],
                available_stock: [type: :integer, required: true]
              }},
           seller_sku: :string,
           original_price: [type: :string, required: true]
         }},
      required: true
    ]
  }
  def create_product(params, credential \\ []) do
    with {:ok, data} <- Contrak.validate(params, @create_product_scheme),
         {:ok, client} <- Client.new(credential) do
      Client.post(client, "/api/products", data)
    end
  end
end
