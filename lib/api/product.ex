defmodule TiktokShop.Product do
  @moduledoc """
  Product API
  """

  alias TiktokShop.Client

  alias TiktokShop.Support.Helpers

  @doc """
  Get product list

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#

  `search_status`: 0-all、1-draft、2-pending、3-failed、4-live、5-seller_deactivated、6-platform_deactivated、7-freeze​ (require)
  """
  @get_product_list_schema %{
    search_status: [type: :integer, in: TiktokShop.ProductsStatus.enum()],
    seller_sku_list: [type: {:array, :string}],
    page_size: [type: :integer, required: true, number: [min: 1, max: 100]],
    page_number: [type: :integer, required: true, number: [min: 1]],
    update_time_from: [type: :integer, number: [min: 0]],
    update_time_to: [type: :integer, number: [min: 0]],
    create_time_from: [type: :integer, number: [min: 0]],
    create_time_to: [type: :integer, number: [min: 0]]
  }
  def get_product_list(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_product_list_schema),
         {:ok, client} <- Client.new(opts) do
      payload = Helpers.clean_nil(data)
      Client.post(client, "/api/products/search", payload)
    end
  end

  @doc """
  Get product detail

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#hsy3Mb
  """
  @get_product_detail_schema %{
    product_id: [type: :string, required: true]
  }
  def get_product_detail(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_product_detail_schema),
         {:ok, client} <- Client.new(opts) do
      Client.get(client, "/api/products/details", query: data)
    end
  end

  @doc """
  DeActive product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#ruq5mh

  `product_ids` array products need to deactive
  """
  @deactivate_products_schema %{
    product_ids: [type: {:array, :string}, required: true]
  }
  def deactivate_products(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @deactivate_products_schema),
         {:ok, client} <- Client.new(opts) do
      Client.post(client, "/api/products/inactivated_products", data)
    end
  end

  @doc """
  Delete product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#MeZAY6

  `product_ids` array products need to deactive
  """
  @delete_products_schema %{
    product_ids: [type: {:array, :string}, required: true]
  }
  def delete_products(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @delete_products_schema),
         {:ok, client} <- Client.new(opts) do
      Client.delete(client, "/api/products", body: data)
    end
  end

  @doc """
  Get all product category

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#jIY8hJ

  """
  def get_categories(opts \\ []) do
    with {:ok, client} <- Client.new(opts) do
      Client.get(client, "/api/products/categories")
    end
  end

  @doc """
  Get attribute by category

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#WBz4V0
  """
  @get_attributes_schema %{
    category_id: [type: :string, required: true]
  }
  @spec get_attributes(map(), keyword()) :: {:ok, map()} | {:error, any()}
  def get_attributes(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_attributes_schema),
         {:ok, client} <- Client.new(opts) do
      Client.get(client, "/api/products/attributes", query: data)
    end
  end

  @doc """
  Get category rules by category_id

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#Vo9x7O
  """
  @get_category_rules_schema %{
    category_id: [type: :string, required: true]
  }
  @spec get_category_rules(map(), keyword()) :: {:ok, map()} | {:error, any()}
  def get_category_rules(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @get_category_rules_schema),
         {:ok, client} <- Client.new(opts) do
      Client.get(client, "/api/products/categories/rules", query: data)
    end
  end

  @doc """
  Get all brands

  References: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#IPng1X
  """
  def get_brands(opts \\ []) do
    with {:ok, client} <- Client.new(opts) do
      Client.get(client, "/api/products/brands")
    end
  end

  @doc """
  Upload image product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#dO1LU7

  `img_data`: just support image type: JPG, JPEG, PNG.
    Image picture pixels at least 600*600 and at most 20000*20000.
    Max size of original image: 5MB (recommand: image size have to >100KB, width/height must be >1000pix).
    The picture file is a string generated by base64 encoding.

  `img_scene`: Scenes using pictures:​
   - 1:"PRODUCT_IMAGE" The ratio of horizontal and vertical is recommended to be 1:1​
   - 2:"DESCRIPTION_IMAGE"​
   - 3:"ATTRIBUTE_IMAGE " The ratio of horizontal and vertical is recommended to be 1:1​
   - 4:"CERTIFICATION_IMAGE"​
   - 5:"SIZE_CHART_IMAGE"
  """
  @upload_image_schema %{
    img_data: [type: :string, required: true],
    img_scene: [type: :integer, required: true]
  }
  def upload_images(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @upload_image_schema),
         {:ok, client} <- Client.new(opts) do
      Client.post(client, "/api/products/upload_imgs", data)
    end
  end

  @doc """
  Update file

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#gKjcnl

  `file_data`: Import the file in pdf format.
    The file is a string generated by base64 encoding.
    The original file size must not exceed 10M.

  `file_name`: string have format <file_name>.pdf
  """
  @update_files_schema %{
    file_data: [type: :string, required: true],
    file_name: [type: :string, required: true]
  }
  def upload_files(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @update_files_schema),
         {:ok, client} <- Client.new(opts) do
      Client.post(client, "/api/products/upload_files", data)
    end
  end

  @product_certification_schema %{
    id: [type: :string, required: true],
    images: {:array, %{id: [type: :string, required: true]}},
    files:
      {:array,
       %{
         id: [type: :string, required: true],
         name: [type: :string, required: true],
         type: [type: :string, required: true]
       }}
  }

  @doc """
  Creat new product

  Reference: https://bytedance.feishu.cn/docs/doccnDyz5Bbk26iOdejbBRBlLrb#ahrYRK

  `product_name`: Type string, Product name, Chinese characters are not allowed, and the character length must not exceed 188.
  `description`: Type string, Product description, follow rules:
                  - Chinese characters are not allowed.
                  - This field character limit needs to be within 10000 characters.
                  - Must conform to html syntax. Currently only supports <p><img><ul><li> tags, and Tags cannot be nested.
  `category_id`: Type string, Get from list category and must be a leaf category.
  `images`: Type array - string, list product images allow up to 9 pictures. Id_image get from response data in action UploadImage, exp: %{id: "tos-maliva-i-o3syd03w52-us/92e5e74cc8644401960b5763542093a7"}.
  `warranty_period`: Type integer, Value from 1 to 21, please see description warranty period in file enum "warranty_period.ex"
  `warranty_policy`: Type string, Description for the warranty policy, Chinese characters are not allowed. The character length needs to be within 99
  `package_length`: Type integer, and max value 60.
  `package_width`: Type integer, and max value 40.
  `package_height`: Type integer, and max value 35.
  `package_weight`: Type string, and max value 20. Up to two digits after the decimal point
  `is_cod_open`: Type boolean, turn on or off the cod (Cash on Delivery)
  `skus`: Type array the object, the number of sku in a product cannot exceed 100
        -> sales_attributes: Type array the object
              ->-> attribute_id: Type string, get from list Attribute. Have 2 value:  "100000" for color and "100089" for another custom value
              ->-> custom_value: Type string. Chinese characters are not allowed. The character length must not exceed 20. There are up to 100 attribute values under each sale attribute, but there can be no duplicate sales attribute values under the same sales attribute
              ->-> sku_img: Type object
                ->->-> id: Id_image get from response data in action UploadImage, exp: %{id: "tos-maliva-i-o3syd03w52-us/92e5e74cc8644401960b5763542093a7"}.
        -> stock_infos: Type array the object
              ->-> warehouse_id: Type string, get from list warehouse. Note: must get warehouse_id have field "warehouse_type" = 1 (sales warehouse), don't get "warehouse_type" = 2 (return warehouse) or "warehouse_type" = 3 (local return warehouse)
              ->-> available_stock: Type integer, the value should be non-negative numbers（include number 0). The upper limit of the available stock value set at a time is 99999
        -> seller_sku: Type string, Chinese characters are not allowed. The character length must not exceed 50.
        -> original_price: Type string.
  """
  @sales_attribute_schema %{
    attribute_id: [type: :string, required: true],
    value_id: :string,
    custom_value: :string,
    sku_img: %{
      id: [type: :string, required: true]
    }
  }

  @sku_schema %{
    sales_attributes: [
      type: {:array, @sales_attribute_schema},
      required: true
    ],
    stock_infos:
      {:array,
       %{
         warehouse_id: [type: :string, required: true],
         available_stock: [type: :integer, required: true]
       }},
    seller_sku: :string,
    original_price: [type: :string, required: true]
  }

  @create_product_schema %{
    product_name: [type: :string, required: true],
    description: [type: :string, required: true],
    category_id: [type: :string, required: true],
    brand_id: :string,
    images: [
      type: {:array, %{id: [type: :string, required: true]}},
      required: true
    ],
    warranty_period: [type: :integer, in: TiktokShop.WarrantyPeriod.enum()],
    warranty_policy: :string,
    package_length: [type: :integer, number: [min: 1, max: 60]],
    package_width: [type: :integer, number: [min: 1, max: 40]],
    package_height: [type: :integer, number: [min: 1, max: 35]],
    package_weight: [type: :string, required: true],
    size_chart: %{
      img_id: [type: :string, required: true]
    },
    product_certifications: {:array, @product_certification_schema},
    is_cod_open: [type: :boolean, required: true],
    skus: [
      type: {:array, @sku_schema},
      required: true
    ]
  }
  def create_product(params, opts \\ []) do
    with {:ok, data} <- Contrak.validate(params, @create_product_schema),
         {:ok, client} <- Client.new(opts) do
      payload = TiktokShop.Support.Helpers.clean_nil(data)
      Client.post(client, "/api/products", payload)
    end
  end
end
